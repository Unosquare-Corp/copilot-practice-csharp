// Controllers/ItemsController.cs

using Microsoft.AspNetCore.Mvc;
using CopilotDemo.Models;
using CopilotDemo.Services;

namespace CopilotDemo.Controllers
{
    [ApiController]
    [Route("[controller]")]
    public class ItemsController : ControllerBase
    {
        private readonly IItemService _itemService;

        // TODO: Inject IItemService via constructor injection.
        // Instructions:
        // 1. Start typing 'public ItemsController('.
        // 2. Use Copilot to suggest the constructor with IItemService parameter.
        // 3. Accept the suggestion.

        // Code to be generated by Copilot:

        /*
        public ItemsController(IItemService itemService)
        {
            _itemService = itemService;
        }
        */

        // TODO: Implement action methods for CRUD operations.
        // Instructions:
        // 1. Use Copilot to generate methods for Get, GetById, Post, Put, and Delete.
        // 2. Ensure the methods call the corresponding service methods.

        // Code to be generated by Copilot:

        /*
        [HttpGet]
        public IEnumerable<Item> Get()
        {
            return _itemService.GetAll();
        }

        [HttpGet("{id}")]
        public ActionResult<Item> Get(int id)
        {
            var item = _itemService.GetById(id);
            if (item == null)
                return NotFound();

            return item;
        }

        [HttpPost]
        public IActionResult Post(Item item)
        {
            try
            {
                _itemService.Add(item);
                return CreatedAtAction(nameof(Get), new { id = item.Id }, item);
            }
            catch (ArgumentException ex)
            {
                return BadRequest(ex.Message);
            }
        }

        [HttpPut("{id}")]
        public IActionResult Put(int id, Item item)
        {
            if (id != item.Id)
                return BadRequest();

            try
            {
                _itemService.Update(item);
            }
            catch (KeyNotFoundException ex)
            {
                return NotFound(ex.Message);
            }

            return NoContent();
        }

        [HttpDelete("{id}")]
        public IActionResult Delete(int id)
        {
            try
            {
                _itemService.Delete(id);
            }
            catch (KeyNotFoundException ex)
            {
                return NotFound(ex.Message);
            }

            return NoContent();
        }
        */
    }
}
