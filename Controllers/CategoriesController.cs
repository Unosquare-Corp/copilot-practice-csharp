// Controllers/CategoriesController.cs

// TODO: Create a new controller for 'Category' entity.
// Instructions:
// 1. Create a new file named 'CategoriesController.cs' in the 'Controllers' folder.
// 2. Use Copilot to generate a controller class for managing categories.
// 3. Ensure it includes action methods for CRUD operations.
// 4. Use Copilot to write code that is defensive and well-formed.

// Steps:
// 1. Start typing 'using Microsoft.AspNetCore.Mvc;' and necessary using directives.
// 2. Define the namespace 'CopilotDemo.Controllers'.
// 3. Declare the 'CategoriesController' class with '[ApiController]' and '[Route("[controller]")]' attributes.
// 4. Inject the necessary service via constructor injection.
// 5. Implement action methods for Get, GetById, Post, Put, and Delete.

// Code to be generated by Copilot:

/*
using Microsoft.AspNetCore.Mvc;
using CopilotDemo.Models;
using CopilotDemo.Services;

namespace CopilotDemo.Controllers
{
    [ApiController]
    [Route("[controller]")]
    public class CategoriesController : ControllerBase
    {
        private readonly ICategoryService _categoryService;

        public CategoriesController(ICategoryService categoryService)
        {
            _categoryService = categoryService;
        }

        [HttpGet]
        public IEnumerable<Category> Get()
        {
            return _categoryService.GetAll();
        }

        [HttpGet("{id}")]
        public ActionResult<Category> Get(int id)
        {
            var category = _categoryService.GetById(id);
            if (category == null)
                return NotFound();

            return category;
        }

        [HttpPost]
        public IActionResult Post(Category category)
        {
            try
            {
                _categoryService.Add(category);
                return CreatedAtAction(nameof(Get), new { id = category.Id }, category);
            }
            catch (ArgumentException ex)
            {
                return BadRequest(ex.Message);
            }
        }

        [HttpPut("{id}")]
        public IActionResult Put(int id, Category category)
        {
            if (id != category.Id)
                return BadRequest();

            try
            {
                _categoryService.Update(category);
            }
            catch (KeyNotFoundException ex)
            {
                return NotFound(ex.Message);
            }

            return NoContent();
        }

        [HttpDelete("{id}")]
        public IActionResult Delete(int id)
        {
            try
            {
                _categoryService.Delete(id);
            }
            catch (KeyNotFoundException ex)
            {
                return NotFound(ex.Message);
            }

            return NoContent();
        }
    }
}
*/
