// Tests/ItemsControllerTests.cs

using Xunit;
using CopilotDemo.Controllers;
using CopilotDemo.Services;
using CopilotDemo.Models;
using Microsoft.AspNetCore.Mvc;
using Moq;
using System.Collections.Generic;

// TODO: Add unit tests for ItemsController.
// Instructions:
// 1. Use Copilot to generate unit tests for the ItemsController.
// 2. Ensure tests cover the action methods and handle different scenarios.
// 3. Follow the step-by-step instructions below.

// Steps:
// 1. Create a new class 'ItemsControllerTests'.
// 2. Use the [Fact] attribute to denote test methods.
// 3. Use Mock<IItemService> to mock dependencies.
// 4. Write test methods for Get, GetById, Post, Put, and Delete actions.

// Example of a test method to be generated by Copilot:

/*
public class ItemsControllerTests
{
    [Fact]
    public void Get_ReturnsAllItems()
    {
        // Arrange
        var mockService = new Mock<IItemService>();
        mockService.Setup(service => service.GetAll()).Returns(GetTestItems());
        var controller = new ItemsController(mockService.Object);

        // Act
        var result = controller.Get();

        // Assert
        Assert.NotNull(result);
        Assert.Equal(2, result.Count());
    }

    private IEnumerable<Item> GetTestItems()
    {
        return new List<Item>
        {
            new Item { Id = 1, Name = "Item1", Description = "Desc1" },
            new Item { Id = 2, Name = "Item2", Description = "Desc2" }
        };
    }

    // Continue adding test methods for other actions.
}
*/
